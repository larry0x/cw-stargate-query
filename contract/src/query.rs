// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `cosmos/auth/v1beta1/query.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct QueryAccountRequest {
    // message fields
    pub address: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryAccountRequest {
    fn default() -> &'a QueryAccountRequest {
        <QueryAccountRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryAccountRequest {
    pub fn new() -> QueryAccountRequest {
        ::std::default::Default::default()
    }

    // string address = 1;


    pub fn get_address(&self) -> &str {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }
}

impl ::protobuf::Message for QueryAccountRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.address.is_empty() {
            os.write_string(1, &self.address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryAccountRequest {
        QueryAccountRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "address",
                |m: &QueryAccountRequest| { &m.address },
                |m: &mut QueryAccountRequest| { &mut m.address },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryAccountRequest>(
                "QueryAccountRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryAccountRequest {
        static instance: ::protobuf::rt::LazyV2<QueryAccountRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryAccountRequest::new)
    }
}

impl ::protobuf::Clear for QueryAccountRequest {
    fn clear(&mut self) {
        self.address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryAccountRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryAccountRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryAccountResponse {
    // message fields
    pub account: ::protobuf::SingularPtrField<::protobuf::well_known_types::Any>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryAccountResponse {
    fn default() -> &'a QueryAccountResponse {
        <QueryAccountResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryAccountResponse {
    pub fn new() -> QueryAccountResponse {
        ::std::default::Default::default()
    }

    // .google.protobuf.Any account = 1;


    pub fn get_account(&self) -> &::protobuf::well_known_types::Any {
        self.account.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance())
    }
    pub fn clear_account(&mut self) {
        self.account.clear();
    }

    pub fn has_account(&self) -> bool {
        self.account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account(&mut self, v: ::protobuf::well_known_types::Any) {
        self.account = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if self.account.is_none() {
            self.account.set_default();
        }
        self.account.as_mut().unwrap()
    }

    // Take field
    pub fn take_account(&mut self) -> ::protobuf::well_known_types::Any {
        self.account.take().unwrap_or_else(|| ::protobuf::well_known_types::Any::new())
    }
}

impl ::protobuf::Message for QueryAccountResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.account {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.account)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.account.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.account.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryAccountResponse {
        QueryAccountResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "account",
                |m: &QueryAccountResponse| { &m.account },
                |m: &mut QueryAccountResponse| { &mut m.account },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryAccountResponse>(
                "QueryAccountResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryAccountResponse {
        static instance: ::protobuf::rt::LazyV2<QueryAccountResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryAccountResponse::new)
    }
}

impl ::protobuf::Clear for QueryAccountResponse {
    fn clear(&mut self) {
        self.account.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryAccountResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryAccountResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fcosmos/auth/v1beta1/query.proto\x12\x13cosmos.auth.v1beta1\x1a\x14\
    gogoproto/gogo.proto\x1a\x19google/protobuf/any.proto\x1a\x1cgoogle/api/\
    annotations.proto\x1a\x1ecosmos/auth/v1beta1/auth.proto\x1a\x19cosmos_pr\
    oto/cosmos.proto\"9\n\x13QueryAccountRequest\x12\x18\n\x07address\x18\
    \x01\x20\x01(\tR\x07address:\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"T\n\x14Que\
    ryAccountResponse\x12<\n\x07account\x18\x01\x20\x01(\x0b2\x14.google.pro\
    tobuf.AnyR\x07accountB\x0c\xca\xb4-\x08AccountIB+Z)github.com/cosmos/cos\
    mos-sdk/x/auth/typesJ\xca\x05\n\x06\x12\x04\x03\0\x1b\x01\nq\n\x01\x0c\
    \x12\x03\x03\0\x122g\x20Forked\x20from:\n\x20https://github.com/cosmos/c\
    osmos-sdk/blob/v0.44.5/proto/cosmos/auth/v1beta1/query.proto\n\n\x08\n\
    \x01\x02\x12\x03\x04\0\x1c\n\t\n\x02\x03\0\x12\x03\x06\0\x1e\n\t\n\x02\
    \x03\x01\x12\x03\x07\0#\n\t\n\x02\x03\x02\x12\x03\x08\0&\n\t\n\x02\x03\
    \x03\x12\x03\t\0(\n\t\n\x02\x03\x04\x12\x03\n\0#\n\x08\n\x01\x08\x12\x03\
    \x0c\0@\n\t\n\x02\x08\x0b\x12\x03\x0c\0@\nW\n\x02\x04\0\x12\x04\x0f\0\
    \x15\x01\x1aK\x20QueryAccountRequest\x20is\x20the\x20request\x20type\x20\
    for\x20the\x20Query/Account\x20RPC\x20method.\n\n\n\n\x03\x04\0\x01\x12\
    \x03\x0f\x08\x1b\n\n\n\x03\x04\0\x07\x12\x03\x10\x02-\n\r\n\x06\x04\0\
    \x07\x8d\xf4\x03\x12\x03\x10\x02-\n\n\n\x03\x04\0\x07\x12\x03\x11\x02-\n\
    \r\n\x06\x04\0\x07\x81\xf4\x03\x12\x03\x11\x02-\n8\n\x04\x04\0\x02\0\x12\
    \x03\x14\x02\x15\x1a+\x20address\x20defines\x20the\x20address\x20to\x20q\
    uery\x20for.\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x14\x02\x08\n\x0c\n\
    \x05\x04\0\x02\0\x01\x12\x03\x14\t\x10\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03\x14\x13\x14\nY\n\x02\x04\x01\x12\x04\x18\0\x1b\x01\x1aM\x20QueryAcc\
    ountResponse\x20is\x20the\x20response\x20type\x20for\x20the\x20Query/Acc\
    ount\x20RPC\x20method.\n\n\n\n\x03\x04\x01\x01\x12\x03\x18\x08\x1c\nH\n\
    \x04\x04\x01\x02\0\x12\x03\x1a\x02R\x1a;\x20account\x20defines\x20the\
    \x20account\x20of\x20the\x20corresponding\x20address.\n\n\x0c\n\x05\x04\
    \x01\x02\0\x06\x12\x03\x1a\x02\x15\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\
    \x1a\x16\x1d\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x1a\x20!\n\x0c\n\x05\
    \x04\x01\x02\0\x08\x12\x03\x1a\"Q\n\x0f\n\x08\x04\x01\x02\0\x08\xc9\xd6\
    \x05\x12\x03\x1a#Pb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
